Resultados de ejecutar el programa
 Layer (type)                         ┃ Output Shape                ┃         Param # ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩
│ conv2d (Conv2D)                      │ (None, 62, 62, 32)          │             896 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ max_pooling2d (MaxPooling2D)         │ (None, 31, 31, 32)          │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ conv2d_1 (Conv2D)                    │ (None, 29, 29, 64)          │          18,496 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ max_pooling2d_1 (MaxPooling2D)       │ (None, 14, 14, 64)          │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ conv2d_2 (Conv2D)                    │ (None, 12, 12, 128)         │          73,856 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ max_pooling2d_2 (MaxPooling2D)       │ (None, 6, 6, 128)           │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ flatten (Flatten)                    │ (None, 4608)                │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ dense (Dense)                        │ (None, 128)                 │         589,952 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ dropout (Dropout)                    │ (None, 128)                 │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ dense_1 (Dense)                      │ (None, 64)                  │           8,256 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ dropout_1 (Dropout)                  │ (None, 64)                  │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ dense_2 (Dense)                      │ (None, 1)                   │              65 │
└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘
 Total params: 691,521 (2.64 MB)
 Trainable params: 691,521 (2.64 MB)
 Non-trainable params: 0 (0.00 B)
C:\Users\Ricardo\Documents\InteligenciaArtificial\venv\Lib\site-packages\keras\src\trainers\data_adapters\py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
Epoch 1/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 39s 714ms/step - accuracy: 0.4800 - loss: 0.7048 - val_accuracy: 0.5375 - val_loss: 0.6928
Epoch 2/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 7s 134ms/step - accuracy: 0.5057 - loss: 0.6934 - val_accuracy: 0.5725 - val_loss: 0.6922
Epoch 3/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 7s 137ms/step - accuracy: 0.4877 - loss: 0.6932 - val_accuracy: 0.5500 - val_loss: 0.6923
Epoch 4/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 7s 132ms/step - accuracy: 0.5300 - loss: 0.6927 - val_accuracy: 0.5800 - val_loss: 0.6904
Epoch 5/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 7s 131ms/step - accuracy: 0.5373 - loss: 0.6936 - val_accuracy: 0.5325 - val_loss: 0.6896
Epoch 6/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 7s 130ms/step - accuracy: 0.5219 - loss: 0.6898 - val_accuracy: 0.5000 - val_loss: 0.6932
Epoch 7/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 11s 139ms/step - accuracy: 0.4989 - loss: 0.6929 - val_accuracy: 0.5125 - val_loss: 0.6915
Epoch 8/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 7s 147ms/step - accuracy: 0.5008 - loss: 0.6917 - val_accuracy: 0.5175 - val_loss: 0.6917
Epoch 9/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 7s 147ms/step - accuracy: 0.4925 - loss: 0.6920 - val_accuracy: 0.5525 - val_loss: 0.6815
Epoch 10/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 7s 147ms/step - accuracy: 0.5429 - loss: 0.6837 - val_accuracy: 0.5825 - val_loss: 0.6682
Epoch 11/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 8s 158ms/step - accuracy: 0.5663 - loss: 0.6765 - val_accuracy: 0.6675 - val_loss: 0.6521
Epoch 12/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 10s 198ms/step - accuracy: 0.6030 - loss: 0.6548 - val_accuracy: 0.6425 - val_loss: 0.6404
Epoch 13/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 7s 143ms/step - accuracy: 0.6052 - loss: 0.6671 - val_accuracy: 0.5550 - val_loss: 0.6665
Epoch 14/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 8s 166ms/step - accuracy: 0.6345 - loss: 0.6515 - val_accuracy: 0.6025 - val_loss: 0.6479
Epoch 15/15
50/50 ━━━━━━━━━━━━━━━━━━━━ 7s 146ms/step - accuracy: 0.5748 - loss: 0.6758 - val_accuracy: 0.6650 - val_loss: 0.6323
13/13 ━━━━━━━━━━━━━━━━━━━━ 1s 61ms/step 

📊 Matriz de confusión:
[[130  70]
 [ 64 136]]
✅ Precisión final en test: 66.50%

Análisis:
1. Precisión del modelo:
Precisión final en test: 66.50%
Esto significa que de cada 100 imágenes del conjunto de prueba, el modelo clasifica correctamente unas 66-67.

2. Matriz de confusión:
Esto te muestra cuántas imágenes se clasificaron correctamente o incorrectamente:

Predijo Gato	Predijo Perro
Era Gato (real)	130 Bien	70 Mal
Era Perro (real)	64 Mal	136  Bien
Acertó 130 gatos y 136 perros correctamente.
Falló en 70 gatos que los llamó perros, y 64 perros que los llamó gatos.
El modelo confunde bastante entre ambas clases, aunque mejora con las iteraciones de los Epochs
| Epoch | Accuracy Entrenamiento | Accuracy Validación |
| ----- | ---------------------- | ------------------- |
| 1     | 48%                    | 53%                 |
| 5     | 53%                    | 53%                 |
| 10    | 54%                    | 58%                 |
| 12    | 60%                    | 64%                 |
| 15    | 57%                    | **66.5%**           |

El modelo mejoró gradualmente, especialmente después del 10mo Epoch
La precisión de validación siempre fue mejor que la de entrenamiento → eso está bien y no hay sobreajuste evidente.

Mejoras:
Más  Epochs (20–30).
Entrenar con más imágenes si es posible.